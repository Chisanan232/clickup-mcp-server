name: 'Setup Python with UV and Dependencies'
description: 'Sets up Python, installs UV, and optionally installs project dependencies'
inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.13'
  install-dependencies:
    description: 'Whether to install project dependencies'
    required: false
    default: 'true'
  dependency-groups:
    description: 'Dependency groups to install (e.g., "release-ci" or "dev,test")'
    required: false
    default: 'release-ci'
  cache-dependencies:
    description: 'Whether to cache UV dependencies'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Cache UV dependencies
      if: inputs.cache-dependencies == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ inputs.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      if: inputs.install-dependencies == 'true'
      shell: bash
      run: |
        if [ "${{ inputs.dependency-groups }}" = "none" ]; then
          echo "Skipping dependency installation"
        else
          echo "Installing dependencies: [${{ inputs.dependency-groups }}]"
          uv pip install --system ".[${{ inputs.dependency-groups }}]"
        fi

    - name: Verify installation
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "UV version: $(uv --version)"
        echo "Current package version: $(uv version --short)"
