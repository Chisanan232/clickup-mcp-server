name: 'Build Git Tag and Create GitHub Release'
description: 'Simple and maintainable git tag and GitHub release creation'

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to tag and release'
        required: true
        type: string
      checkout-sha:
        description: 'Specific commit SHA to checkout (for post-version-bump code)'
        required: false
        default: ''
        type: string
      debug_mode:
        description: 'Run in debug mode without creating actual release'
        type: boolean
        required: false
        default: false

    secrets:
      github_auth_token:
        description: 'GitHub token for creating releases'
        required: false

    outputs:
      release_created:
        description: 'Whether a release was created'
        value: ${{ jobs.create_release.outputs.release_created }}
      release_url:
        description: 'URL of the created release'
        value: ${{ jobs.create_release.outputs.release_url }}

jobs:
  create_release:
    name: Create Git Tag and GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      release_url: ${{ steps.release.outputs.release_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Use specific SHA if provided (for post-version-bump code), otherwise use conditional ref logic
          ref: ${{ inputs.checkout-sha != '' && inputs.checkout-sha || (github.event_name == 'push' && github.ref_name == 'master' && github.ref_name || '') }}

      - name: Check if release files exist
        id: check_files
        run: |
          if [[ ! -f ".github/tag_and_release/release-title.md" ]]; then
            echo "‚ùå Missing release-title.md file"
            exit 1
          fi
          
          if [[ ! -f ".github/tag_and_release/release-notes.md" ]]; then
            echo "‚ùå Missing release-notes.md file"
            exit 1
          fi
          
          echo "‚úÖ Release files found"

      - name: Read release content
        id: content
        run: |
          # Read release title (remove any newlines)
          TITLE=$(cat .github/tag_and_release/release-title.md | tr -d '\n')
          echo "Release title: $TITLE"
          
          # Read release notes (preserve formatting)
          NOTES=$(cat .github/tag_and_release/release-notes.md)
          
          # Set outputs using GitHub's multiline format
          {
            echo 'title<<EOF'
            echo "$TITLE"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          {
            echo 'notes<<EOF'
            echo "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create git tag
        if: ${{ !inputs.debug_mode }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and push tag
          git tag -a "v${{ inputs.version }}" -m "${{ steps.content.outputs.title }}"
          git push -u origin --tags
          
          echo "‚úÖ Created and pushed tag: v${{ inputs.version }}"
#          git push origin "v${{ inputs.version }}"

      - name: Create GitHub release
        id: release
        if: ${{ !inputs.debug_mode }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_auth_token || secrets.GITHUB_TOKEN }}
        run: |
          # Create release using GitHub CLI
          RELEASE_URL=$(gh release create "v${{ inputs.version }}" \
            --title "${{ steps.content.outputs.title }}" \
            --notes-file .github/tag_and_release/release-notes.md \
            --target "${{ github.sha }}")
          
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Created GitHub release: $RELEASE_URL"

      - name: Debug mode output
        if: ${{ inputs.debug_mode }}
        run: |
          echo "üêõ DEBUG MODE - Would create:"
          echo "Tag: v${{ inputs.version }}"
          echo "Title: ${{ steps.content.outputs.title }}"
          echo "Notes preview:"
          echo "---"
          head -n 10 .github/tag_and_release/release-notes.md
          echo "---"
          
          echo "release_created=false" >> $GITHUB_OUTPUT
          echo "release_url=" >> $GITHUB_OUTPUT
