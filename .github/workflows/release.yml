# Production Release
name: release

on:
  push:
    branches:
      - master
    paths:
      - .github/tag_and_release/release-**
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      python:
        description: 'Python package release'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip
      docker:
        description: 'Docker image release'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip
      docs:
        description: 'Documentation versioning'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - force
          - skip
      notes:
        description: 'Release notes'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  intent:
    name: Parse Release Intent
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.intent.outputs.do_release }}
      level: ${{ steps.intent.outputs.level }}
      python: ${{ steps.intent.outputs.python }}
      docker: ${{ steps.intent.outputs.docker }}
      docs: ${{ steps.intent.outputs.docs }}
      notes: ${{ steps.intent.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv pip install --system .[release-ci]

      - name: Parse release intent
        id: intent
        env:
          INPUT_LEVEL: ${{ inputs.level }}
          INPUT_PYTHON: ${{ inputs.python }}
          INPUT_DOCKER: ${{ inputs.docker }}
          INPUT_DOCS: ${{ inputs.docs }}
          INPUT_NOTES: ${{ inputs.notes }}
        run: uv run release-intent

  bump_version:
    name: Bump Version and Commit
    runs-on: ubuntu-latest
    needs: intent
    if: needs.intent.outputs.do_release == 'true'
    outputs:
      version: ${{ steps.bump.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv pip install --system .[release-ci]

      - name: Configure git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Bump version with uv
        id: bump
        run: |
          case "${{ needs.intent.outputs.level }}" in
            "patch")
              BUMP_FLAG="--bump patch"
              ;;
            "minor")
              BUMP_FLAG="--bump minor"
              ;;
            "major")
              BUMP_FLAG="--bump major"
              ;;
            *)
              BUMP_FLAG="--bump patch"  # Default to patch for auto
              ;;
          esac
          
          echo "Bumping version with: uv version $BUMP_FLAG"
          uv version $BUMP_FLAG
          
          # Get the new version
          NEW_VERSION=$(uv version)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Commit the version bump
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  build_git-tag_and_create_github-release:
    uses: ./.github/workflows/rw_build_git-tag_and_create_github-release.yaml
    needs: bump_version
    secrets:
      github_auth_token: ${{ secrets.GITHUB_TOKEN }}

  release_python:
    name: Release Python Package
    runs-on: ubuntu-latest
    needs: [intent, bump_version, build_git-tag_and_create_github-release]
    if: needs.intent.outputs.do_release == 'true' && needs.intent.outputs.python != 'skip'
    environment: pypi
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv pip install --system .[release-ci]

      - name: Build package
        run: |
          echo "Building Python package for version ${{ needs.bump_version.outputs.version }}"
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        run: |
          uv publish

  release_docker:
    name: Release Docker Image
    runs-on: ubuntu-latest
    needs: [intent, bump_version, build_git-tag_and_create_github-release]
    if: needs.intent.outputs.do_release == 'true' && needs.intent.outputs.docker != 'skip'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.bump_version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM
        run: |
          syft ghcr.io/${{ github.repository }}:${{ needs.bump_version.outputs.version }} -o spdx-json --file sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom
          path: sbom.spdx.json

      - name: Sign Docker image
        run: |
          cosign sign --yes ghcr.io/${{ github.repository }}:${{ needs.bump_version.outputs.version }}
          cosign sign --yes ghcr.io/${{ github.repository }}:latest

      - name: Attest SBOM
        run: |
          cosign attest --yes --predicate sbom.spdx.json --type spdxjson ghcr.io/${{ github.repository }}:${{ needs.bump_version.outputs.version }}

  release_docs:
    name: Release Documentation
    runs-on: ubuntu-latest
    needs: [intent, bump_version, build_git-tag_and_create_github-release]
    if: needs.intent.outputs.do_release == 'true' && needs.intent.outputs.docs != 'skip'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: docs
        run: pnpm install --frozen-lockfile

      - name: Version documentation
        working-directory: docs
        run: pnpm exec docusaurus docs:version "${{ needs.bump_version.outputs.version }}"

      - name: Sync changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md docs/release-notes/changelog.md
          fi

      - name: Configure git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Commit and push documentation changes
        run: |
          git add docs/
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "docs: version ${{ needs.bump_version.outputs.version }} [skip ci]"
            git push origin HEAD:master
          fi
