name: Release Validation (Dry Run)

on:
  pull_request:
    branches:
      - master
    paths:
      - .github/tag_and_release/**
      - pyproject.toml
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level to test'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

permissions:
  contents: read
  packages: read
  id-token: write  # For cosign keyless signing

concurrency:
  group: release-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  intent-parse:
    name: Test Release Intent Parsing
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.intent.outputs.do_release }}
      level: ${{ steps.intent.outputs.level }}
      python: ${{ steps.intent.outputs.python }}
      docker: ${{ steps.intent.outputs.docker }}
      docs: ${{ steps.intent.outputs.docs }}
      notes: ${{ steps.intent.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv pip install --system .[release-ci]

      - name: Test release intent parsing
        id: intent
        env:
          INPUT_LEVEL: ${{ inputs.level }}
          INPUT_PYTHON: 'auto'
          INPUT_DOCKER: 'auto'
          INPUT_DOCS: 'auto'
          INPUT_NOTES: 'Validation test run'
        run: |
          echo "Testing release intent parsing..."
          uv run release-intent
          echo "Release intent parsing completed successfully"

  python-build-check:
    name: Test Python Package Build
    runs-on: ubuntu-latest
    needs: intent-parse
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv pip install --system .[release-ci]

      - name: Test uv version (dry run)
        run: |
          echo "Testing uv version bump calculation..."
          echo "Current version: $(uv version)"
          uv version --dry-run --bump patch || true
          uv version --dry-run --bump minor || true  
          uv version --dry-run --bump major || true
          echo "UV version dry run completed"

      - name: Build Python package
        run: |
          echo "Building Python package..."
          uv build
          echo "Package build completed"

      - name: Check package integrity
        run: |
          echo "Checking package integrity..."
          # uv build already validates the package structure
          ls -la dist/
          echo "Package check completed"

      - name: Test package installation
        run: |
          echo "Testing package installation in fresh environment..."
          # Create a fresh virtual environment for testing
          python -m venv test_env
          source test_env/bin/activate
          
          # Install the built wheel
          pip install dist/*.whl
          
          # Test basic import
          python -c "
          try:
              import clickup_mcp
              print('✓ Package import successful')
          except ImportError as e:
              print(f'✗ Package import failed: {e}')
              exit(1)
          "
          
          # Test CLI availability
          clickup-mcp-server --help > /dev/null
          echo "✓ CLI command available"
          
          deactivate
          rm -rf test_env
          echo "Package installation test completed"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-python-package
          path: dist/
          retention-days: 1

  docker-build-smoke:
    name: Test Docker Build and Health Check
    runs-on: ubuntu-latest
    needs: intent-parse
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image for testing..."
          docker build -t clickup-mcp-test:latest .
          echo "Docker build completed"

      - name: Test container startup and health check
        run: |
          echo "Testing container startup and health check..."
          
          # Start container in background
          docker run -d --name test-container -p 8080:8080 \
            -e CLICKUP_API_TOKEN=test_token \
            clickup-mcp-test:latest
          
          # Wait for container to be ready (up to 60 seconds)
          echo "Waiting for container to be ready..."
          timeout=60
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if docker ps | grep -q test-container; then
              if curl -f http://127.0.0.1:8080/healthz > /dev/null 2>&1; then
                echo "✓ Health check passed"
                break
              fi
            fi
            sleep 2
            elapsed=$((elapsed + 2))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "✗ Health check failed after ${timeout}s"
            docker logs test-container
            exit 1
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container
          echo "Container test completed successfully"

      - name: Test image inspection
        run: |
          echo "Inspecting Docker image..."
          docker images clickup-mcp-test:latest
          docker inspect clickup-mcp-test:latest
          echo "Image inspection completed"

  docs-build:
    name: Test Documentation Build
    runs-on: ubuntu-latest
    needs: intent-parse
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: docs
        run: |
          echo "Installing documentation dependencies..."
          pnpm install --frozen-lockfile
          echo "Dependencies installed"

      - name: Build documentation
        working-directory: docs
        run: |
          echo "Building documentation site..."
          pnpm build
          echo "Documentation build completed"

      - name: Test documentation versioning (dry run)
        working-directory: docs
        run: |
          echo "Testing documentation versioning..."
          # Test with a dummy version
          TEST_VERSION="1.0.0-test"
          
          # Create a backup of current state
          cp -r . ../docs-backup
          
          # Test versioning command
          pnpm exec docusaurus docs:version "$TEST_VERSION" || true
          
          # Restore original state
          rm -rf ./*
          cp -r ../docs-backup/* .
          rm -rf ../docs-backup
          
          echo "Documentation versioning test completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-docs-build
          path: docs/build/
          retention-days: 1

  supply-chain-loopback:
    name: Test Supply Chain Security
    runs-on: ubuntu-latest
    needs: docker-build-smoke
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          echo "Building test image for supply chain testing..."
          docker build -t clickup-mcp-security-test:latest .

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM for local image
        run: |
          echo "Generating SBOM for test image..."
          syft clickup-mcp-security-test:latest -o spdx-json --file test-sbom.spdx.json
          echo "SBOM generation completed"
          
          # Verify SBOM content
          jq '.name' test-sbom.spdx.json || echo "Warning: Could not parse SBOM JSON"
          echo "SBOM validation completed"

      - name: Test cosign keyless signing (loopback)
        run: |
          echo "Testing cosign keyless signing..."
          
          # Set up temporary registry for testing (using local Docker daemon)
          IMAGE_NAME="localhost/clickup-mcp-test:cosign-test"
          
          # Re-tag for local testing
          docker tag clickup-mcp-security-test:latest "$IMAGE_NAME"
          
          # Attempt keyless signing (may fail in CI environment, that's expected)
          if cosign sign --yes "$IMAGE_NAME" 2>/dev/null; then
            echo "✓ Cosign signing successful"
            
            # Attempt verification
            if cosign verify "$IMAGE_NAME" 2>/dev/null; then
              echo "✓ Cosign verification successful"
            else
              echo "⚠ Cosign verification failed (expected in CI)"
            fi
          else
            echo "⚠ Cosign signing failed (expected in CI without OIDC)"
          fi
          
          echo "Cosign testing completed"

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-security-artifacts
          path: |
            test-sbom.spdx.json
          retention-days: 1

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [intent-parse, python-build-check, docker-build-smoke, docs-build, supply-chain-loopback]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "=== Release Validation Summary ==="
          echo ""
          echo "Intent Parsing: ${{ needs.intent-parse.result }}"
          echo "Python Build: ${{ needs.python-build-check.result }}"
          echo "Docker Build: ${{ needs.docker-build-smoke.result }}"
          echo "Docs Build: ${{ needs.docs-build.result }}"
          echo "Supply Chain: ${{ needs.supply-chain-loopback.result }}"
          echo ""
          
          if [[ "${{ needs.intent-parse.result }}" == "success" && \
                "${{ needs.python-build-check.result }}" == "success" && \
                "${{ needs.docker-build-smoke.result }}" == "success" && \
                "${{ needs.docs-build.result }}" == "success" && \
                "${{ needs.supply-chain-loopback.result }}" == "success" ]]; then
            echo "✅ All validation checks passed! Release process is ready."
            echo ""
            echo "Release Configuration:"
            echo "- Do Release: ${{ needs.intent-parse.outputs.do_release }}"
            echo "- Level: ${{ needs.intent-parse.outputs.level }}"
            echo "- Python: ${{ needs.intent-parse.outputs.python }}"
            echo "- Docker: ${{ needs.intent-parse.outputs.docker }}"
            echo "- Docs: ${{ needs.intent-parse.outputs.docs }}"
            echo "- Notes: ${{ needs.intent-parse.outputs.notes }}"
          else
            echo "❌ Some validation checks failed. Please review the logs above."
            exit 1
          fi
