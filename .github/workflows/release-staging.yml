name: Staging Release

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level for staging'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      notes:
        description: 'Staging release notes'
        required: false
        default: 'Staging release for testing'
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: release-staging-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  compute-version:
    name: Compute Staging Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      rc_version: ${{ steps.version.outputs.rc_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python with UV
        uses: ./.github/actions/setup-python-uv
        with:
          install-dependencies: 'true'
          dependency-groups: 'release-ci'

      - name: Compute staging version
        id: version
        run: |
          case "${{ inputs.level }}" in
            "patch")
              BUMP_FLAG="--bump patch"
              ;;
            "minor")
              BUMP_FLAG="--bump minor"
              ;;
            "major")
              BUMP_FLAG="--bump major"
              ;;
            *)
              BUMP_FLAG="--bump patch"
              ;;
          esac
          
          echo "Computing staging version with: uv version --dry-run $BUMP_FLAG"
          BASE_VERSION=$(uv version --dry-run $BUMP_FLAG)
          RC_VERSION="${BASE_VERSION}-rc.0"
          
          echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          
          echo "Base version: $BASE_VERSION"
          echo "RC version: $RC_VERSION"

  build_git-tag_and_create_github-release:
    uses: ./.github/workflows/rw_build_git-tag_and_create_github-release.yaml
    needs: compute-version
    secrets:
      github_auth_token: ${{ secrets.GITHUB_TOKEN }}
    with:
      debug_mode: 'true'

  pypi-test:
    uses: ./.github/workflows/rw_python_package.yaml
    needs: [compute-version, build_git-tag_and_create_github-release]
    with:
      operation: 'publish-testpypi'
      version: ${{ needs.compute-version.outputs.version }}
      artifact-name: 'staging-python-package'

  ghcr-rc:
    uses: ./.github/workflows/rw_docker_operations.yaml
    needs: compute-version
    secrets:
      dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
      registry-token: ${{ secrets.DOCKERHUB_TOKEN }}
    with:
      operation: 'push'
      version: ${{ needs.compute-version.outputs.rc_version }}
      enable-sbom: true
      enable-signing: true
      health-check-port: '8000'
      health-check-path: '/health'

  docs-preview:
    uses: ./.github/workflows/rw_docs_operations.yaml
    needs: compute-version
    with:
      operation: 'deploy-preview'
      version: ${{ needs.compute-version.outputs.rc_version }}
      preview-branch: 'docs-preview'
      upload-artifacts: true

  staging-summary:
    name: Staging Release Summary
    runs-on: ubuntu-latest
    needs: [compute-version, pypi-test, ghcr-rc, docs-preview]
    if: always()
    steps:
      - name: Generate staging release summary
        run: |
          echo "=== Staging Release Summary ==="
          echo ""
          echo "Version Computation: ${{ needs.compute-version.result }}"
          echo "TestPyPI Upload: ${{ needs.pypi-test.result }}"
          echo "GHCR RC Image: ${{ needs.ghcr-rc.result }}"
          echo "Docs Preview: ${{ needs.docs-preview.result }}"
          echo ""
          echo "üì¶ Staging Artifacts:"
          echo "- Base Version: ${{ needs.compute-version.outputs.version }}"
          echo "- RC Version: ${{ needs.compute-version.outputs.rc_version }}"
          echo "- TestPyPI: https://test.pypi.org/project/clickup-mcp-server/${{ needs.compute-version.outputs.version }}/"
          echo "- GHCR RC Image: ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
          echo "- Docs Preview: docs-preview branch"
          echo ""
          
          if [[ "${{ needs.compute-version.result }}" == "success" && \
                "${{ needs.pypi-test.result }}" == "success" && \
                "${{ needs.ghcr-rc.result }}" == "success" && \
                "${{ needs.docs-preview.result }}" == "success" ]]; then
            echo "‚úÖ Staging release completed successfully!"
            echo ""
            echo "üß™ Testing Instructions:"
            echo "1. Install from TestPyPI:"
            echo "   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ clickup-mcp-server==${{ needs.compute-version.outputs.version }}"
            echo ""
            echo "2. Test RC Docker image:"
            echo "   docker run -p 8000:8000 -e CLICKUP_API_TOKEN=your_token ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
            echo ""
            echo "3. Review documentation preview in docs-preview branch"
            echo ""
            echo "üìù Release Notes: ${{ inputs.notes }}"
          else
            echo "‚ùå Some staging deployment steps failed. Check the logs above."
            exit 1
          fi
